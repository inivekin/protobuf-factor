/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_SIMPLE_PROTO_TEST_PB_H_INCLUDED
#define PB_SIMPLE_PROTO_TEST_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* simple test enum */
typedef enum _testEnum_ { 
    testEnum__zero = 0, 
    testEnum__O_1_NE = 1, /* comments */
    testEnum__tw_2_o = 2, 
    testEnum__ThRe_3_E = 3, 
    testEnum__four_4 = 4 
} testEnum_;

/* Struct definitions */
/* simple test message */
typedef struct _test_Message { 
    int32_t signed_int; 
    pb_callback_t unsigned_bigboy; 
    /* oneof test */
    pb_size_t which_choices;
    union {
        testEnum_ primary;
        pb_callback_t secondary;
    } choices; 
} test_Message;


/* Helper constants for enums */
#define _testEnum__MIN testEnum__zero
#define _testEnum__MAX testEnum__four_4
#define _testEnum__ARRAYSIZE ((testEnum_)(testEnum__four_4+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define test_Message_init_default                {0, {{NULL}, NULL}, 0, {_testEnum__MIN}}
#define test_Message_init_zero                   {0, {{NULL}, NULL}, 0, {_testEnum__MIN}}

/* Field tags (for use in manual encoding/decoding) */
#define test_Message_signed_int_tag              1
#define test_Message_unsigned_bigboy_tag         2
#define test_Message_primary_tag                 3
#define test_Message_secondary_tag               4

/* Struct field encoding specification for nanopb */
#define test_Message_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    signed_int,        1) \
X(a, CALLBACK, REPEATED, UINT64,   unsigned_bigboy,   2) \
X(a, STATIC,   ONEOF,    UENUM,    (choices,primary,choices.primary),   3) \
X(a, CALLBACK, ONEOF,    STRING,   (choices,secondary,choices.secondary),   4)
#define test_Message_CALLBACK pb_default_field_callback
#define test_Message_DEFAULT NULL

extern const pb_msgdesc_t test_Message_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define test_Message_fields &test_Message_msg

/* Maximum encoded size of messages (where known) */
/* test_Message_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
